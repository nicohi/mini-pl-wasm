#+title: Course Project Report
#+PROPERTY: ATTACH_DIR ./attach
#+PROPERTY: ATTACH_DIR_INHERIT t
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+LaTeX_HEADER: \usepackage{pdfpages}

* Instructions

*cmake* and *gcc* are required to compile the interpreter.
After =./build.sh= is run, to interpret a mini-pl progmram file, run =./build/mini-pl [filename]=.
For testing purposes, the user can use =./build/mini-pl -s [filename]= to run merely the scanner, or =./build/mini-pl -p [filename]= to run the scanner+parser.
Both commands print a readable result.
Example programs are provided in =./test/=.

* Implementation details
I decided to make WAT (WebAssembly text format) the compile target.
I chose this over the binary WASM format to ease readability.
** Standard library
Since module linking is currently not possible in WASM, I decided to simply add all the standard library functions to the same module as the output program.
* Work log

| Date             | Hours | Progress                           |
|------------------+-------+------------------------------------|
| <2022-05-13 Fri> |     4 | Initialize repo and begin planning |
|------------------+-------+------------------------------------|
| TOTAL HOURS      |     4 |                                    |
#+TBLFM: @>$2=vsum(@2..@-1)
\pagebreak

* Appendix A (MiniPL description)
\includepdf[pages=-]{./attach/MiniPL.pdf}

* Appendix B (Project description)

\includepdf[pages=-]{./attach/CodeGenerationCourseProject.pdf}
