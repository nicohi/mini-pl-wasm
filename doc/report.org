#+title: Course Project Report
#+PROPERTY: ATTACH_DIR ./attach
#+PROPERTY: ATTACH_DIR_INHERIT t
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+LaTeX_HEADER: \usepackage{pdfpages}

* Instructions

*cmake* and *gcc* are required to compile the interpreter.
After =./build.sh= is run, to compile a mini-pl progmram file, run =./build/mini-pl [filename]=, the resulting file is named =out.wat=.
For testing purposes, the user can use =./build/mini-pl -s [filename]= to run merely the scanner, or =./build/mini-pl -p [filename]= to run the scanner+parser.
Both commands print a readable result.
Example programs are provided in =./test/=.

=./run.sh [path to mini-pl program]= can be run after =build.sh= in the project root.
This script compiles the program to WAT, runs wat2wasm, and serves the wasm env on localhost:8080/env.html using python3.

* Implementation details
I decided to make WAT (WebAssembly text format) the compile target.
I chose this over the binary WASM format to ease readability.
** Scanner

The compiler uses a simple ad-hoc scanner and recognizes the following tokens.
The main functionality of the scanner consists of a long switch statement which applies these regular expressions one character at a time, looking ahead as necessary.
\begin{verbatim}
COMMENT = "// | {* ... *}"
STR_LIT = """ <chars> """
PLUS = "+"
MINUS = "-"
MUL = "*"
DIV = "/"
MOD = "%"
EQ = "="
NEQ = "<>"
LT = "<"
GT = ">"
LTE = "<="
GTE = ">="
LEFT_PAREN = "("
RIGHT_PAREN = ")"
LEFT_BRACKET = "["
RIGHT_BRACKET = "]"
ASSIGN = ":="
DOT = "."
COMMA = ","
SEMICOLON = ";"
COLON = ":"
OR = "or"
AND = "and"
NOT = "not"
IF = "if"
THEN = "then"
ELSE = "else"
OF = "of"
WHILE = "while"
DO = "do"
BEGIN = "begin"
END = "end"
VAR = "var"
ARRAY = "array"
PROCEDURE = "procedure"
FUNCTION = "function"
PROGRAM = "program"
ASSERT = "assert"
RETURN = "return"
INT_LIT = <digits>
REAL_LIT = <digits>'.' <digits> [ 'e' [ <sign> ] <digits>]
ID = <letter> { <letter> | <digit> | '_' }
SCAN_ERROR = ""
SCAN_EOF = EOF
\end{verbatim}
The scanner handles errors by outputting tokens of type =ERROR= for unterminated strings and unexpected characters.
These error tokens should then be handled by the parser.

** Parser

The parser implements each of the productions (everything enclosed in =<>=) in the CFG below as a class which is used to make up the syntax tree.
\begin{verbatim}
<program> ::= "program" <id> ";" { <procedure> | <function> } <main-block> "."
<procedure> ::= "procedure" <id> "(" <parameters> ")" ";" <block> ";"
<function> ::= "function" <id> "(" <parameters> ")" ":" <type> ";" <block> ";"
<var-declaration> ::= "var" <id> { "," <id> } ":" <type>
<parameters> ::= [ "var" ] <id> ":" <type> { "," [ "var" ] <id> ":" <type> } |
                 <empty>
<type> ::= <simple type> | <array type>
<array type> ::= "array" "[" [<integer expr>] "]" "of" <simple type>
<simple type> ::= <type id>
<block> ::= "begin" <statement> { ";" <statement> } [ ";" ] "end"
<statement> ::= <simple statement> | <structured statement> | <var-declaration>
<empty> ::=
<simple statement> ::= <assignment statement> | <call> | <return statement> |
            <read statement> | <write statement> | <assert statement>
<assignment statement> ::= <variable> ":=" <expr>
<call> ::= <id> "(" <arguments> ")"
<arguments> ::= expr { "," expr } | <empty>
<return statement> ::= "return" [ expr ]
<read statement> ::= "read" "(" <variable> { "," <variable> } ")"
<write statement> ::= "writeln" "(" <arguments> ")"
<assert statement> ::= "assert" "(" <Boolean expr> ")"
<structured statement> ::= <block> | <if statement> | <while statement>
<if statement> ::= "if" <Boolean expr> "then" <statement> |
                   "if" <Boolean expr> "then" <statement> "else" <statement>
<while statement> ::= "while" <Boolean expr> "do" <statement>
<expr> ::= <simple expr> |
           <simple expr> <relational operator> <simple expr>
<simple expr> ::= [ <sign> ] <term> { <adding operator> <term> }
<term> ::= <factor> { <multiplying operator> <factor> }
<factor> ::= <call> | <variable> | <literal> | "(" <expr> ")" |
             "not" <factor> | <factor> "." "size"
<variable> ::= <variable id> [ "[" <integer expr> "]" ]
<relational operator> ::= "=" | "<>" | "<" | "<=" | ">=" | ">"
<sign> ::= "+" | "-"
<negation> ::= "not"
<adding operator> ::= "+" | "-" | "or"
<multiplying operator> ::= "*" | "/" | "%" | "and"
\end{verbatim}

** AST
After parsing, the parse tree is simplified by the =ParseTreeWalker= class using the visitor pattern.
The new AST is then traversed by the =Decorator= class, which performs type checks on expressions and verifies that variables are in scope.
The following classes represent the AST.
\begin{verbatim}
class IRNode {
public:
  mutable std::string type = "void";
  mutable std::string name;
  mutable std::list<std::string> errors;
  mutable std::list<std::string> errors_in;
  mutable std::list<std::string> errors_out;
  mutable std::map<std::string, std::string> symtab; // name,type
  virtual void accept(IRVisitor *v) = 0;
  void appendError(const std::string s) const { errors.emplace_back(s); }
  void appendError_in(const std::string s) const { errors_in.emplace_back(s); }
  void appendError_out(const std::string s) const {
    errors_out.emplace_back(s);
  }
};

class Program : public IRNode {
public:
  std::list<Function *> functions;
  Scope *scope;
  void accept(IRVisitor *v) override { v->visitProgram(this); }
};

class Function : public IRNode {
public:
  Scope *scope;
  void accept(IRVisitor *v) override { v->visitFunction(this); }
};

class Statement : public IRNode {
public:
  void accept(IRVisitor *v) override { v->visitStatement(this); }
};

class Scope : public IRNode {
public:
  std::list<Statement *> statements;
  void accept(IRVisitor *v) override { v->visitScope(this); }
};

class If : public Statement {
public:
  Scope *scope1;
  Scope *scope2;
  void accept(IRVisitor *v) override { v->visitIf(this); }
};

class While : public Statement {
public:
  Scope *scope;
  void accept(IRVisitor *v) override { v->visitWhile(this); }
};

class Declare : public Statement {
public:
  std::list<std::string> names;
  void accept(IRVisitor *v) override { v->visitDeclare(this); }
};

class Assign : public Statement {
public:
  Expr *expr;
  void accept(IRVisitor *v) override { v->visitAssign(this); }
};

class Call : public Statement {
public:
  std::list<Expr *> args;
  void accept(IRVisitor *v) override { v->visitCall(this); }
};

class Return : public Statement {
public:
  Expr *expr;
  void accept(IRVisitor *v) override { v->visitReturn(this); }
};

class Read : public Statement {
public:
  std::list<std::string> names;
  void accept(IRVisitor *v) override { v->visitRead(this); }
};

class Assert : public Statement {
public:
  Expr *expr;
  void accept(IRVisitor *v) override { v->visitAssert(this); }
};

class Expr : public IRNode {
public:
  void accept(IRVisitor *v) override { v->visitExpr(this); }
};

class Literal : public Expr {
public:
  std::string value;
  void accept(IRVisitor *v) override { v->visitLiteral(this); }
};

class BinaryOp : public Expr {
public:
  std::string op;
  Expr *left;
  Expr *right;
  void accept(IRVisitor *v) override { v->visitBinaryOp(this); }
};

class UnaryOp : public Expr {
public:
  std::string op;
  Expr *left;
  void accept(IRVisitor *v) override { v->visitUnaryOp(this); }
};

class Variable : public Expr {
public:
  Expr *index;
  void accept(IRVisitor *v) override { v->visitVariable(this); }
};
\end{verbatim}
** Standard library
Since module linking is currently not possible in WASM, I decided to simply add all the standard library functions to the same module as the output program.
IO and memory management are handled by Javascript and WASM functions in =src/wasmlib/wasmlib.js= and =src/wasmlib/wasmlib.wat=.
*** Functions
Procedures are simply functions with return type "void".
*** Simplifications
# - Every variable is an array, arrays use address[-1] to store the size of the array.
# - calling ".size" simply fetches the value at pointer[-1] of the.
- procedures are syntactic sugar for functions that return type "void"
- strings are always 20 bytes long
*** Not implemented
- Real numbers
- Arrays
- functions/procedures
- malloc/free
* Challenges
I started working on this project way too late.
This lead to me running out of time while implementing code generation.

* Work log

| Date             | Hours | Progress                             |
|------------------+-------+--------------------------------------|
| <2022-05-13 Fri> |     4 | Initialize repo and begin planning   |
| <2022-05-14 Sat> |    10 | Fix parser bugs                      |
| <2022-05-15 Sun> |    16 | Get parser working with new language |
| <2022-05-16 Mon> |    12 | Code generation                      |
|------------------+-------+--------------------------------------|
| TOTAL HOURS      |    42 |                                      |
#+TBLFM: @>$2=vsum(@2..@-1)
\pagebreak

* Appendix A (MiniPL description)
\includepdf[pages=-]{./attach/MiniPL.pdf}

* Appendix B (Project description)

\includepdf[pages=-]{./attach/CodeGenerationCourseProject.pdf}
